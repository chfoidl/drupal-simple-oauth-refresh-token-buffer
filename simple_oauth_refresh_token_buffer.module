<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_entity_base_field_info().
 */
function simple_oauth_refresh_token_buffer_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'consumer') {
    $fields['refresh_token_buffer_enabled'] = BaseFieldDefinition::create('boolean')
      ->setLabel(new TranslatableMarkup('Enable Refresh Token Buffer'))
      ->setDescription(new TranslatableMarkup('If enabled, token refresh responses are buffered for a short time to avoid race conditions.'))
      ->setDisplayOptions('view', [
        'label' => 'inline',
        'weight' => 6,
      ])
      ->setDisplayOptions('form', [
        'weight' => 6,
      ])
      ->setRevisionable(TRUE)
      ->setTranslatable(FALSE)
      ->setRequired(FALSE)
      ->setDefaultValue(FALSE);

    $fields['refresh_token_buffer_wait_timeout'] = BaseFieldDefinition::create('integer')
      ->setLabel(new TranslatableMarkup('Refresh Token Buffer Wait Timeout'))
      ->setDescription(new TranslatableMarkup('Time in Milliseconds to wait when a token refresh is already pending, before trying again.'))
      ->setDisplayOptions('view', [
        'label' => 'inline',
        'weight' => 6,
      ])
      ->setDisplayOptions('form', [
        'weight' => 6,
      ])
      ->setRevisionable(TRUE)
      ->setTranslatable(FALSE)
      ->setRequired(FALSE)
      ->setDefaultValue(100);

    $fields['refresh_token_buffer_wait_retry_count'] = BaseFieldDefinition::create('integer')
      ->setLabel(new TranslatableMarkup('Refresh Token Buffer Wait Retry Count'))
      ->setDescription(new TranslatableMarkup('Number of times to try to get the buffered response for a already running token refresh. After exceeding this number of tries, an error response is returned.'))
      ->setDisplayOptions('view', [
        'label' => 'inline',
        'weight' => 6,
      ])
      ->setDisplayOptions('form', [
        'weight' => 6,
      ])
      ->setRevisionable(TRUE)
      ->setTranslatable(FALSE)
      ->setRequired(FALSE)
      ->setDefaultValue(10);
  }

  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function simple_oauth_refresh_token_buffer_form_consumer_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $stateVisibleIfRefreshTokenGrantEnabled = [
    '#states' => [
      'visible' => [
        ':input[name="grant_types[refresh_token]"]' => [
          'checked' => TRUE,
        ],
      ],
    ],
  ];

  $form['refresh_token_buffer_settings_info'] = [
    '#type' => 'details',
    '#title' => new TranslatableMarkup('Refresh Token Buffer Settings'),
    '#open' => TRUE,
    '#weight' => 3.7,
    'info' => [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => new TranslatableMarkup('The <strong>Refresh Token</strong> grant must be enabled to show refresh token buffer settings.'),
      '#attributes' => [
        'class' => ['form-element'],
        'disabled' => TRUE,
        'style' => ['font-style: italic;'],
      ],
    ],
    '#states' => [
      'visible' => [
        ':input[name="grant_types[refresh_token]"]' => [
          'checked' => FALSE,
        ],
      ],
    ],
  ];

  $form['refresh_token_buffer_settings'] = array_merge([
    '#type' => 'details',
    '#title' => new TranslatableMarkup('Refresh Token Buffer Settings'),
    '#open' => TRUE,
    '#weight' => 3.7,
    'refresh_token_buffer_enabled' => array_merge(
      $form['refresh_token_buffer_enabled'],
      $stateVisibleIfRefreshTokenGrantEnabled,
    ),
    'refresh_token_buffer_wait_timeout' => array_merge(
      $form['refresh_token_buffer_wait_timeout'],
      $stateVisibleIfRefreshTokenGrantEnabled,
    ),
    'refresh_token_buffer_wait_retry_count' => array_merge(
      $form['refresh_token_buffer_wait_retry_count'],
      $stateVisibleIfRefreshTokenGrantEnabled,
    ),
  ], $stateVisibleIfRefreshTokenGrantEnabled);

  unset($form['refresh_token_buffer_enabled']);
  unset($form['refresh_token_buffer_wait_timeout']);
  unset($form['refresh_token_buffer_wait_retry_count']);
}
